*jumpinline.vim*          For Vim version 8.0         Last change: 2017 March 28

                                  _____   _____   _____
                                 /    /  /    /  /    /
                                /    /  /    /  /    /
                      _____    /    /  /    /  /    /   ___
                      \    \__/    /  /    /  /    /____|  \
                       \          /  /    /  /              \
                        \________/  /____/  /____________   /
                                                        |__/
                                 *jumpinline.vim*
                                      v0.2

===============================================================================
CONTENTS                                                     *jumpinlineContents*

    1. Usage ................ |jumpinlineUsage|
    2. Default mappings ..... |jumpinlineDefaultMappings|
    3. Configuration ........ |jumpinlineConfiguration|
    4. Changelog ............ |jumpinlineChangelog|
    5. License .............. |jumpinlineLicense|
    6. Credits .............. |jumpinlineCredits|

===============================================================================
Section 1: Usage                                                *jumpinlineUsage*

`jumpinline.vim` is a plugin that allows the user to quickly find the right
place in a line, by simply using the number keys on the keyboard.

To jump to 10% of the current line, press <space>1. For 50%, press <space>5.
If you jump a little bit too far, you can adjust by pressing any other number,
as many times as you like, without having to press space again.

This works because `jumpinline.vim` runs as its own submode (provided by
`vim-submode` - see |jumpinlineCredits|), which exits back to normal mode
after a short timeout - or automatically, if you press any other letter that
isn't used by `jumpinline.vim`.

This means that it is very easy to jump quickly to any position in the current
line, without having to think about what character to jump to using t/f, or
having to press w a bunch of times until you find your place.

`jumpinline.vim` is especially useful when working with lines containing a lot
of repetition, making t, f and even / a pain to use. Instead, just estimate
how far you need to go into the line and press the corresponding number. Need
to go the middle of the file, approximately? Just press <space>5 and adjust
using hjkl or another number.

===============================================================================
Section 2: Default mappings                           *jumpinlineDefaultMappings*

All the following mappings can be changed (see |jumpinlineConfiguration|).

From outside `jumpinline` submode:

------------+-----------------------------+------------------------------------
   Mapping  |  Effect (with `vim-submode`)  |  Effect (without `vim-submode`)
------------+-----------------------------+------------------------------------
  <space>`  |  starts `jumpinline` submode  |  goes to   0% of the line
  <space>1  |  ----------- : -----------  |  -- : --  10% ---- : ----
  <space>2  |  ----------- : -----------  |  -- : --  20% ---- : ----
  <space>3  |  ----------- : -----------  |  -- : --  30% ---- : ----
  <space>4  |  ----------- : -----------  |  -- : --  40% ---- : ----
  <space>5  |  ----------- : -----------  |  -- : --  50% ---- : ----
  <space>6  |  ----------- : -----------  |  -- : --  60% ---- : ----
  <space>7  |  ----------- : -----------  |  -- : --  70% ---- : ----
  <space>8  |  ----------- : -----------  |  -- : --  80% ---- : ----
  <space>9  |  ----------- : -----------  |  -- : --  90% ---- : ----
  <space>0  |  ----------- : -----------  |  -- : -- 100% ---- : ----
------------+-----------------------------+------------------------------------

From inside the `jumpinline` submode (only if `vim-submode` is loaded):

------------+------------------------------------------------------------------
   Mapping  |  Effect
------------+------------------------------------------------------------------
         `  |   goes to   0% of the line
         1  |   -- : --  10% ---- : ----
         2  |   -- : --  20% ---- : ----
         3  |   -- : --  30% ---- : ----
         4  |   -- : --  40% ---- : ----
         5  |   -- : --  50% ---- : ----
         6  |   -- : --  60% ---- : ----
         7  |   -- : --  70% ---- : ----
         8  |   -- : --  80% ---- : ----
         9  |   -- : --  90% ---- : ----
         0  |   -- : -- 100% ---- : ----
-------+-----------------------------------------------------------------------

===============================================================================
Section 3: Configuration                                *jumpinlineConfiguration*

To configure `jumpinline.vim`, the following variables can be set:

*g:jumpinline_prefix*
    (default: '<space>')
    Key used in combination with *g:jumpinline_bindings* to trigger the
    jumpinline submode.

*g:jumpinline_bindings*
    (default: ['`', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0'])
    Keys used after *g:jumpinline_prefix* to jump to 0%, 10%, 20%, 30%, 40%,
    50%, 60%, 70%, 80%, 90% and 100% of the line, respectively.

*g:jumpinline_graphical_line*
    (default: 0)
    Whether or not to traverse the graphical line or the "real" line (which may
    contain wraps).  If set to 1, `jumpinline.vim` will treat wraps as normal
    line breaks.

*g:jumpinline_use_submode*
    (default: 1)
    Whether or not to use `vim-submode`. Note: it is highly recommended not to
    change this.

*g:jumpinline_capture_leaving_key*
    (default: 0)
    If set to 1, it configures `vim-submode` to capture any unmapped key you type
    whilst in the *jumpinline* submode.  In either case, typing an unmapped key
    (e.g., `x`) will quit the submode, but if this option is set to 0, the
    typed key will be executed (e.g., `x` will be executed and remove a
    character).

===============================================================================
Section 4: Changelog                                        *jumpinlineChangelog*

v0.1 ------------------------------------------------------------ 2017 March 27

- Beta release, but in somewhat working condition.

v0.2 ------------------------------------------------------------ 2017 March 28

- Added *g:jumpinline_graphical_line* option.
- Various bugfixes, in working condition.

v0.3 ------------------------------------------------------------ 2017 March 31

- Removed *g:jumpinline_leave_on_any_key* option
- Added *g:jumpinline_capture_leaving_key* option
- Added tests for default and custom configurations using vader.vim

===============================================================================
Section 5: License                                            *jumpinlineLicense*

MIT License {{{

  Copyright (c) 2017 John Ankarström

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
  IN THE SOFTWARE.

}}}

===============================================================================
Section 6: Credits                                            *jumpinlineCredits*

Author: John Ankarström <john.ankarstrom@gmail.com>

I'd also like to thank Bram Moolenaar, the author of *help-writing* - you have
been a great help in documenting my plugin.

-------------------------------------------------------------------------------

vim:tw=79:ts=4:ft=help:norl:nowrap
